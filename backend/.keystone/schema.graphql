""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input PlayerImageRelateToOneInput {
  create: PlayerImageCreateInput
  connect: PlayerImageWhereUniqueInput
  disconnect: PlayerImageWhereUniqueInput
  disconnectAll: Boolean
}

input StatRelateToOneInput {
  create: StatCreateInput
  connect: StatWhereUniqueInput
  disconnect: StatWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Player {
  id: ID!
  player_id: Int
  player_name: String
  player_known_name: String
  player_birth_date: String
  country_id: Int
  country_name: String
  country_code: String
  photo: PlayerImage
  stat: Stat
  status: String
}

input PlayerWhereInput {
  AND: [PlayerWhereInput]
  OR: [PlayerWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  player_id: Int
  player_id_not: Int
  player_id_lt: Int
  player_id_lte: Int
  player_id_gt: Int
  player_id_gte: Int
  player_id_in: [Int]
  player_id_not_in: [Int]
  player_name: String
  player_name_not: String
  player_name_contains: String
  player_name_not_contains: String
  player_name_starts_with: String
  player_name_not_starts_with: String
  player_name_ends_with: String
  player_name_not_ends_with: String
  player_name_i: String
  player_name_not_i: String
  player_name_contains_i: String
  player_name_not_contains_i: String
  player_name_starts_with_i: String
  player_name_not_starts_with_i: String
  player_name_ends_with_i: String
  player_name_not_ends_with_i: String
  player_name_in: [String]
  player_name_not_in: [String]
  player_known_name: String
  player_known_name_not: String
  player_known_name_contains: String
  player_known_name_not_contains: String
  player_known_name_starts_with: String
  player_known_name_not_starts_with: String
  player_known_name_ends_with: String
  player_known_name_not_ends_with: String
  player_known_name_i: String
  player_known_name_not_i: String
  player_known_name_contains_i: String
  player_known_name_not_contains_i: String
  player_known_name_starts_with_i: String
  player_known_name_not_starts_with_i: String
  player_known_name_ends_with_i: String
  player_known_name_not_ends_with_i: String
  player_known_name_in: [String]
  player_known_name_not_in: [String]
  player_birth_date: String
  player_birth_date_not: String
  player_birth_date_contains: String
  player_birth_date_not_contains: String
  player_birth_date_starts_with: String
  player_birth_date_not_starts_with: String
  player_birth_date_ends_with: String
  player_birth_date_not_ends_with: String
  player_birth_date_i: String
  player_birth_date_not_i: String
  player_birth_date_contains_i: String
  player_birth_date_not_contains_i: String
  player_birth_date_starts_with_i: String
  player_birth_date_not_starts_with_i: String
  player_birth_date_ends_with_i: String
  player_birth_date_not_ends_with_i: String
  player_birth_date_in: [String]
  player_birth_date_not_in: [String]
  country_id: Int
  country_id_not: Int
  country_id_lt: Int
  country_id_lte: Int
  country_id_gt: Int
  country_id_gte: Int
  country_id_in: [Int]
  country_id_not_in: [Int]
  country_name: String
  country_name_not: String
  country_name_contains: String
  country_name_not_contains: String
  country_name_starts_with: String
  country_name_not_starts_with: String
  country_name_ends_with: String
  country_name_not_ends_with: String
  country_name_i: String
  country_name_not_i: String
  country_name_contains_i: String
  country_name_not_contains_i: String
  country_name_starts_with_i: String
  country_name_not_starts_with_i: String
  country_name_ends_with_i: String
  country_name_not_ends_with_i: String
  country_name_in: [String]
  country_name_not_in: [String]
  country_code: String
  country_code_not: String
  country_code_contains: String
  country_code_not_contains: String
  country_code_starts_with: String
  country_code_not_starts_with: String
  country_code_ends_with: String
  country_code_not_ends_with: String
  country_code_i: String
  country_code_not_i: String
  country_code_contains_i: String
  country_code_not_contains_i: String
  country_code_starts_with_i: String
  country_code_not_starts_with_i: String
  country_code_ends_with_i: String
  country_code_not_ends_with_i: String
  country_code_in: [String]
  country_code_not_in: [String]
  photo: PlayerImageWhereInput
  photo_is_null: Boolean
  stat: StatWhereInput
  stat_is_null: Boolean
  status: String
  status_not: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  status_i: String
  status_not_i: String
  status_contains_i: String
  status_not_contains_i: String
  status_starts_with_i: String
  status_not_starts_with_i: String
  status_ends_with_i: String
  status_not_ends_with_i: String
  status_in: [String]
  status_not_in: [String]
}

input PlayerWhereUniqueInput {
  id: ID!
}

enum SortPlayersBy {
  id_ASC
  id_DESC
  player_id_ASC
  player_id_DESC
  player_name_ASC
  player_name_DESC
  player_known_name_ASC
  player_known_name_DESC
  player_birth_date_ASC
  player_birth_date_DESC
  country_id_ASC
  country_id_DESC
  country_name_ASC
  country_name_DESC
  country_code_ASC
  country_code_DESC
  photo_ASC
  photo_DESC
  stat_ASC
  stat_DESC
  status_ASC
  status_DESC
}

input PlayerUpdateInput {
  player_id: Int
  player_name: String
  player_known_name: String
  player_birth_date: String
  country_id: Int
  country_name: String
  country_code: String
  photo: PlayerImageRelateToOneInput
  stat: StatRelateToOneInput
  status: String
}

input PlayersUpdateInput {
  id: ID!
  data: PlayerUpdateInput
}

input PlayerCreateInput {
  player_id: Int
  player_name: String
  player_known_name: String
  player_birth_date: String
  country_id: Int
  country_name: String
  country_code: String
  photo: PlayerImageRelateToOneInput
  stat: StatRelateToOneInput
  status: String
}

input PlayersCreateInput {
  data: PlayerCreateInput
}

type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input PlayerRelateToOneInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
  disconnect: PlayerWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type PlayerImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  player: Player
}

input PlayerImageWhereInput {
  AND: [PlayerImageWhereInput]
  OR: [PlayerImageWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  player: PlayerWhereInput
  player_is_null: Boolean
}

input PlayerImageWhereUniqueInput {
  id: ID!
}

enum SortPlayerImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  player_ASC
  player_DESC
}

input PlayerImageUpdateInput {
  image: Upload
  altText: String
  player: PlayerRelateToOneInput
}

input PlayerImagesUpdateInput {
  id: ID!
  data: PlayerImageUpdateInput
}

input PlayerImageCreateInput {
  image: Upload
  altText: String
  player: PlayerRelateToOneInput
}

input PlayerImagesCreateInput {
  data: PlayerImageCreateInput
}

""" A keystone list """
type Team {
  id: ID!
  team_id: Int
  team_name: String
  team_first_color: String
  stat: Stat
}

input TeamWhereInput {
  AND: [TeamWhereInput]
  OR: [TeamWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  team_id: Int
  team_id_not: Int
  team_id_lt: Int
  team_id_lte: Int
  team_id_gt: Int
  team_id_gte: Int
  team_id_in: [Int]
  team_id_not_in: [Int]
  team_name: String
  team_name_not: String
  team_name_contains: String
  team_name_not_contains: String
  team_name_starts_with: String
  team_name_not_starts_with: String
  team_name_ends_with: String
  team_name_not_ends_with: String
  team_name_i: String
  team_name_not_i: String
  team_name_contains_i: String
  team_name_not_contains_i: String
  team_name_starts_with_i: String
  team_name_not_starts_with_i: String
  team_name_ends_with_i: String
  team_name_not_ends_with_i: String
  team_name_in: [String]
  team_name_not_in: [String]
  team_first_color: String
  team_first_color_not: String
  team_first_color_contains: String
  team_first_color_not_contains: String
  team_first_color_starts_with: String
  team_first_color_not_starts_with: String
  team_first_color_ends_with: String
  team_first_color_not_ends_with: String
  team_first_color_i: String
  team_first_color_not_i: String
  team_first_color_contains_i: String
  team_first_color_not_contains_i: String
  team_first_color_starts_with_i: String
  team_first_color_not_starts_with_i: String
  team_first_color_ends_with_i: String
  team_first_color_not_ends_with_i: String
  team_first_color_in: [String]
  team_first_color_not_in: [String]
  stat: StatWhereInput
  stat_is_null: Boolean
}

input TeamWhereUniqueInput {
  id: ID!
}

enum SortTeamsBy {
  id_ASC
  id_DESC
  team_id_ASC
  team_id_DESC
  team_name_ASC
  team_name_DESC
  team_first_color_ASC
  team_first_color_DESC
  stat_ASC
  stat_DESC
}

input TeamUpdateInput {
  team_id: Int
  team_name: String
  team_first_color: String
  stat: StatRelateToOneInput
}

input TeamsUpdateInput {
  id: ID!
  data: TeamUpdateInput
}

input TeamCreateInput {
  team_id: Int
  team_name: String
  team_first_color: String
  stat: StatRelateToOneInput
}

input TeamsCreateInput {
  data: TeamCreateInput
}

input TeamRelateToOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: TeamWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Stat {
  id: ID!
  match_id: Int
  team_id: Int
  player_id: Int
  minutes_played: String
  team_possession_percentage: String
  xg: Int
  shots: Int
  goals: Int
  tackles: Int
  interceptions: Int
  pressures: Int
  passes: Int
  completed_passes: Int
  left_foot_passes: Int
  right_foot_passes: Int
  player_shots_faced: Int
  player: Player
  team: Team
}

input StatWhereInput {
  AND: [StatWhereInput]
  OR: [StatWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  match_id: Int
  match_id_not: Int
  match_id_lt: Int
  match_id_lte: Int
  match_id_gt: Int
  match_id_gte: Int
  match_id_in: [Int]
  match_id_not_in: [Int]
  team_id: Int
  team_id_not: Int
  team_id_lt: Int
  team_id_lte: Int
  team_id_gt: Int
  team_id_gte: Int
  team_id_in: [Int]
  team_id_not_in: [Int]
  player_id: Int
  player_id_not: Int
  player_id_lt: Int
  player_id_lte: Int
  player_id_gt: Int
  player_id_gte: Int
  player_id_in: [Int]
  player_id_not_in: [Int]
  minutes_played: String
  minutes_played_not: String
  minutes_played_contains: String
  minutes_played_not_contains: String
  minutes_played_starts_with: String
  minutes_played_not_starts_with: String
  minutes_played_ends_with: String
  minutes_played_not_ends_with: String
  minutes_played_i: String
  minutes_played_not_i: String
  minutes_played_contains_i: String
  minutes_played_not_contains_i: String
  minutes_played_starts_with_i: String
  minutes_played_not_starts_with_i: String
  minutes_played_ends_with_i: String
  minutes_played_not_ends_with_i: String
  minutes_played_in: [String]
  minutes_played_not_in: [String]
  team_possession_percentage: String
  team_possession_percentage_not: String
  team_possession_percentage_contains: String
  team_possession_percentage_not_contains: String
  team_possession_percentage_starts_with: String
  team_possession_percentage_not_starts_with: String
  team_possession_percentage_ends_with: String
  team_possession_percentage_not_ends_with: String
  team_possession_percentage_i: String
  team_possession_percentage_not_i: String
  team_possession_percentage_contains_i: String
  team_possession_percentage_not_contains_i: String
  team_possession_percentage_starts_with_i: String
  team_possession_percentage_not_starts_with_i: String
  team_possession_percentage_ends_with_i: String
  team_possession_percentage_not_ends_with_i: String
  team_possession_percentage_in: [String]
  team_possession_percentage_not_in: [String]
  xg: Int
  xg_not: Int
  xg_lt: Int
  xg_lte: Int
  xg_gt: Int
  xg_gte: Int
  xg_in: [Int]
  xg_not_in: [Int]
  shots: Int
  shots_not: Int
  shots_lt: Int
  shots_lte: Int
  shots_gt: Int
  shots_gte: Int
  shots_in: [Int]
  shots_not_in: [Int]
  goals: Int
  goals_not: Int
  goals_lt: Int
  goals_lte: Int
  goals_gt: Int
  goals_gte: Int
  goals_in: [Int]
  goals_not_in: [Int]
  tackles: Int
  tackles_not: Int
  tackles_lt: Int
  tackles_lte: Int
  tackles_gt: Int
  tackles_gte: Int
  tackles_in: [Int]
  tackles_not_in: [Int]
  interceptions: Int
  interceptions_not: Int
  interceptions_lt: Int
  interceptions_lte: Int
  interceptions_gt: Int
  interceptions_gte: Int
  interceptions_in: [Int]
  interceptions_not_in: [Int]
  pressures: Int
  pressures_not: Int
  pressures_lt: Int
  pressures_lte: Int
  pressures_gt: Int
  pressures_gte: Int
  pressures_in: [Int]
  pressures_not_in: [Int]
  passes: Int
  passes_not: Int
  passes_lt: Int
  passes_lte: Int
  passes_gt: Int
  passes_gte: Int
  passes_in: [Int]
  passes_not_in: [Int]
  completed_passes: Int
  completed_passes_not: Int
  completed_passes_lt: Int
  completed_passes_lte: Int
  completed_passes_gt: Int
  completed_passes_gte: Int
  completed_passes_in: [Int]
  completed_passes_not_in: [Int]
  left_foot_passes: Int
  left_foot_passes_not: Int
  left_foot_passes_lt: Int
  left_foot_passes_lte: Int
  left_foot_passes_gt: Int
  left_foot_passes_gte: Int
  left_foot_passes_in: [Int]
  left_foot_passes_not_in: [Int]
  right_foot_passes: Int
  right_foot_passes_not: Int
  right_foot_passes_lt: Int
  right_foot_passes_lte: Int
  right_foot_passes_gt: Int
  right_foot_passes_gte: Int
  right_foot_passes_in: [Int]
  right_foot_passes_not_in: [Int]
  player_shots_faced: Int
  player_shots_faced_not: Int
  player_shots_faced_lt: Int
  player_shots_faced_lte: Int
  player_shots_faced_gt: Int
  player_shots_faced_gte: Int
  player_shots_faced_in: [Int]
  player_shots_faced_not_in: [Int]
  player: PlayerWhereInput
  player_is_null: Boolean
  team: TeamWhereInput
  team_is_null: Boolean
}

input StatWhereUniqueInput {
  id: ID!
}

enum SortStatsBy {
  id_ASC
  id_DESC
  match_id_ASC
  match_id_DESC
  team_id_ASC
  team_id_DESC
  player_id_ASC
  player_id_DESC
  minutes_played_ASC
  minutes_played_DESC
  team_possession_percentage_ASC
  team_possession_percentage_DESC
  xg_ASC
  xg_DESC
  shots_ASC
  shots_DESC
  goals_ASC
  goals_DESC
  tackles_ASC
  tackles_DESC
  interceptions_ASC
  interceptions_DESC
  pressures_ASC
  pressures_DESC
  passes_ASC
  passes_DESC
  completed_passes_ASC
  completed_passes_DESC
  left_foot_passes_ASC
  left_foot_passes_DESC
  right_foot_passes_ASC
  right_foot_passes_DESC
  player_shots_faced_ASC
  player_shots_faced_DESC
  player_ASC
  player_DESC
  team_ASC
  team_DESC
}

input StatUpdateInput {
  match_id: Int
  team_id: Int
  player_id: Int
  minutes_played: String
  team_possession_percentage: String
  xg: Int
  shots: Int
  goals: Int
  tackles: Int
  interceptions: Int
  pressures: Int
  passes: Int
  completed_passes: Int
  left_foot_passes: Int
  right_foot_passes: Int
  player_shots_faced: Int
  player: PlayerRelateToOneInput
  team: TeamRelateToOneInput
}

input StatsUpdateInput {
  id: ID!
  data: StatUpdateInput
}

input StatCreateInput {
  match_id: Int
  team_id: Int
  player_id: Int
  minutes_played: String
  team_possession_percentage: String
  xg: Int
  shots: Int
  goals: Int
  tackles: Int
  interceptions: Int
  pressures: Int
  passes: Int
  completed_passes: Int
  left_foot_passes: Int
  right_foot_passes: Int
  player_shots_faced: Int
  player: PlayerRelateToOneInput
  team: TeamRelateToOneInput
}

input StatsCreateInput {
  data: StatCreateInput
}

""" A keystone list """
type Match {
  id: ID!
  match_id: Int
  match_date: String
  match_home_team_id: Int
  match_away_team_id: Int
  match_home_score: Int
  match_away_score: Int
  match_home_penalty_score: Int
  match_away_penalty_score: Int
}

input MatchWhereInput {
  AND: [MatchWhereInput]
  OR: [MatchWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  match_id: Int
  match_id_not: Int
  match_id_lt: Int
  match_id_lte: Int
  match_id_gt: Int
  match_id_gte: Int
  match_id_in: [Int]
  match_id_not_in: [Int]
  match_date: String
  match_date_not: String
  match_date_contains: String
  match_date_not_contains: String
  match_date_starts_with: String
  match_date_not_starts_with: String
  match_date_ends_with: String
  match_date_not_ends_with: String
  match_date_i: String
  match_date_not_i: String
  match_date_contains_i: String
  match_date_not_contains_i: String
  match_date_starts_with_i: String
  match_date_not_starts_with_i: String
  match_date_ends_with_i: String
  match_date_not_ends_with_i: String
  match_date_in: [String]
  match_date_not_in: [String]
  match_home_team_id: Int
  match_home_team_id_not: Int
  match_home_team_id_lt: Int
  match_home_team_id_lte: Int
  match_home_team_id_gt: Int
  match_home_team_id_gte: Int
  match_home_team_id_in: [Int]
  match_home_team_id_not_in: [Int]
  match_away_team_id: Int
  match_away_team_id_not: Int
  match_away_team_id_lt: Int
  match_away_team_id_lte: Int
  match_away_team_id_gt: Int
  match_away_team_id_gte: Int
  match_away_team_id_in: [Int]
  match_away_team_id_not_in: [Int]
  match_home_score: Int
  match_home_score_not: Int
  match_home_score_lt: Int
  match_home_score_lte: Int
  match_home_score_gt: Int
  match_home_score_gte: Int
  match_home_score_in: [Int]
  match_home_score_not_in: [Int]
  match_away_score: Int
  match_away_score_not: Int
  match_away_score_lt: Int
  match_away_score_lte: Int
  match_away_score_gt: Int
  match_away_score_gte: Int
  match_away_score_in: [Int]
  match_away_score_not_in: [Int]
  match_home_penalty_score: Int
  match_home_penalty_score_not: Int
  match_home_penalty_score_lt: Int
  match_home_penalty_score_lte: Int
  match_home_penalty_score_gt: Int
  match_home_penalty_score_gte: Int
  match_home_penalty_score_in: [Int]
  match_home_penalty_score_not_in: [Int]
  match_away_penalty_score: Int
  match_away_penalty_score_not: Int
  match_away_penalty_score_lt: Int
  match_away_penalty_score_lte: Int
  match_away_penalty_score_gt: Int
  match_away_penalty_score_gte: Int
  match_away_penalty_score_in: [Int]
  match_away_penalty_score_not_in: [Int]
}

input MatchWhereUniqueInput {
  id: ID!
}

enum SortMatchesBy {
  id_ASC
  id_DESC
  match_id_ASC
  match_id_DESC
  match_date_ASC
  match_date_DESC
  match_home_team_id_ASC
  match_home_team_id_DESC
  match_away_team_id_ASC
  match_away_team_id_DESC
  match_home_score_ASC
  match_home_score_DESC
  match_away_score_ASC
  match_away_score_DESC
  match_home_penalty_score_ASC
  match_home_penalty_score_DESC
  match_away_penalty_score_ASC
  match_away_penalty_score_DESC
}

input MatchUpdateInput {
  match_id: Int
  match_date: String
  match_home_team_id: Int
  match_away_team_id: Int
  match_home_score: Int
  match_away_score: Int
  match_home_penalty_score: Int
  match_away_penalty_score: Int
}

input MatchesUpdateInput {
  id: ID!
  data: MatchUpdateInput
}

input MatchCreateInput {
  match_id: Int
  match_date: String
  match_home_team_id: Int
  match_away_team_id: Int
  match_home_score: Int
  match_away_score: Int
  match_home_penalty_score: Int
  match_away_penalty_score: Int
}

input MatchesCreateInput {
  data: MatchCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Player items which match the where clause. """
  allPlayers(where: PlayerWhereInput, search: String, sortBy: [SortPlayersBy!], orderBy: String, first: Int, skip: Int): [Player]

  """ Search for the Player item with the matching ID. """
  Player(where: PlayerWhereUniqueInput!): Player

  """ Perform a meta-query on all Player items which match the where clause. 
  """
  _allPlayersMeta(where: PlayerWhereInput, search: String, sortBy: [SortPlayersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Player list. """
  _PlayersMeta: _ListMeta

  """ Search for all PlayerImage items which match the where clause. """
  allPlayerImages(where: PlayerImageWhereInput, search: String, sortBy: [SortPlayerImagesBy!], orderBy: String, first: Int, skip: Int): [PlayerImage]

  """ Search for the PlayerImage item with the matching ID. """
  PlayerImage(where: PlayerImageWhereUniqueInput!): PlayerImage

  """ Perform a meta-query on all PlayerImage items which match the where clause. 
  """
  _allPlayerImagesMeta(where: PlayerImageWhereInput, search: String, sortBy: [SortPlayerImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the PlayerImage list. """
  _PlayerImagesMeta: _ListMeta

  """ Search for all Team items which match the where clause. """
  allTeams(where: TeamWhereInput, search: String, sortBy: [SortTeamsBy!], orderBy: String, first: Int, skip: Int): [Team]

  """ Search for the Team item with the matching ID. """
  Team(where: TeamWhereUniqueInput!): Team

  """ Perform a meta-query on all Team items which match the where clause. """
  _allTeamsMeta(where: TeamWhereInput, search: String, sortBy: [SortTeamsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Team list. """
  _TeamsMeta: _ListMeta

  """ Search for all Stat items which match the where clause. """
  allStats(where: StatWhereInput, search: String, sortBy: [SortStatsBy!], orderBy: String, first: Int, skip: Int): [Stat]

  """ Search for the Stat item with the matching ID. """
  Stat(where: StatWhereUniqueInput!): Stat

  """ Perform a meta-query on all Stat items which match the where clause. """
  _allStatsMeta(where: StatWhereInput, search: String, sortBy: [SortStatsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Stat list. """
  _StatsMeta: _ListMeta

  """ Search for all Match items which match the where clause. """
  allMatches(where: MatchWhereInput, search: String, sortBy: [SortMatchesBy!], orderBy: String, first: Int, skip: Int): [Match]

  """ Search for the Match item with the matching ID. """
  Match(where: MatchWhereUniqueInput!): Match

  """ Perform a meta-query on all Match items which match the where clause. 
  """
  _allMatchesMeta(where: MatchWhereInput, search: String, sortBy: [SortMatchesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Match list. """
  _MatchesMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Player item. """
  createPlayer(data: PlayerCreateInput): Player

  """ Create multiple Player items. """
  createPlayers(data: [PlayersCreateInput]): [Player]

  """ Update a single Player item by ID. """
  updatePlayer(id: ID!, data: PlayerUpdateInput): Player

  """ Update multiple Player items by ID. """
  updatePlayers(data: [PlayersUpdateInput]): [Player]

  """ Delete a single Player item by ID. """
  deletePlayer(id: ID!): Player

  """ Delete multiple Player items by ID. """
  deletePlayers(ids: [ID!]): [Player]

  """ Create a single PlayerImage item. """
  createPlayerImage(data: PlayerImageCreateInput): PlayerImage

  """ Create multiple PlayerImage items. """
  createPlayerImages(data: [PlayerImagesCreateInput]): [PlayerImage]

  """ Update a single PlayerImage item by ID. """
  updatePlayerImage(id: ID!, data: PlayerImageUpdateInput): PlayerImage

  """ Update multiple PlayerImage items by ID. """
  updatePlayerImages(data: [PlayerImagesUpdateInput]): [PlayerImage]

  """ Delete a single PlayerImage item by ID. """
  deletePlayerImage(id: ID!): PlayerImage

  """ Delete multiple PlayerImage items by ID. """
  deletePlayerImages(ids: [ID!]): [PlayerImage]

  """ Create a single Team item. """
  createTeam(data: TeamCreateInput): Team

  """ Create multiple Team items. """
  createTeams(data: [TeamsCreateInput]): [Team]

  """ Update a single Team item by ID. """
  updateTeam(id: ID!, data: TeamUpdateInput): Team

  """ Update multiple Team items by ID. """
  updateTeams(data: [TeamsUpdateInput]): [Team]

  """ Delete a single Team item by ID. """
  deleteTeam(id: ID!): Team

  """ Delete multiple Team items by ID. """
  deleteTeams(ids: [ID!]): [Team]

  """ Create a single Stat item. """
  createStat(data: StatCreateInput): Stat

  """ Create multiple Stat items. """
  createStats(data: [StatsCreateInput]): [Stat]

  """ Update a single Stat item by ID. """
  updateStat(id: ID!, data: StatUpdateInput): Stat

  """ Update multiple Stat items by ID. """
  updateStats(data: [StatsUpdateInput]): [Stat]

  """ Delete a single Stat item by ID. """
  deleteStat(id: ID!): Stat

  """ Delete multiple Stat items by ID. """
  deleteStats(ids: [ID!]): [Stat]

  """ Create a single Match item. """
  createMatch(data: MatchCreateInput): Match

  """ Create multiple Match items. """
  createMatches(data: [MatchesCreateInput]): [Match]

  """ Update a single Match item by ID. """
  updateMatch(id: ID!, data: MatchUpdateInput): Match

  """ Update multiple Match items by ID. """
  updateMatches(data: [MatchesUpdateInput]): [Match]

  """ Delete a single Match item by ID. """
  deleteMatch(id: ID!): Match

  """ Delete multiple Match items by ID. """
  deleteMatches(ids: [ID!]): [Match]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
